// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Destination;
float resolution;
float relim;
float scale;
float offx;
float offy;

float sqrMag(float2 z) {
	return z.x* z.x + z.y * z.y;
}

float3 HSVtoRGB(float3 input) {
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(input.xxx + K.xyz) * 6.0 - K.www);

	return input.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), input.y);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	Destination.GetDimensions(width, height);
	float2 c = (id.xy / float2(height, height) * 2 - float2((float)width/(float)height, 1)) * scale + float2(offx, offy);
	float4 result = float4(0, 0, 0, 0);

	float i = 0;
	float2 z = float2(0, 0);
	while (i < resolution) {
		z = float2(z.x * z.x - z.y * z.y + c.x, 2 * z.x * z.y + c.y);
		if (sqrMag(z) > relim) {
			break;
		}
		i++;
	}
	if (i != resolution) {
		float3 rgb = HSVtoRGB(float3(i / resolution, 1, 1));
		result = float4(rgb.r, rgb.g, rgb.b, 0);
	}

	Destination[id.xy] = result;
}
